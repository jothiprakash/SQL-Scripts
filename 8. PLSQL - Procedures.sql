--CREATING PROCEDURES IN ORACLE
CREATE OR REPLACE PROCEDURE update_dept AS
  l_emp_id EMPLOYEE.EMP_ID%TYPE := 10;
  BEGIN
    UPDATE EMPLOYEE SET EMP_DEPT_ID = 2
    WHERE EMP_ID = l_emp_id;
    DBMS_OUTPUT.PUT_LINE('Rows Updated: ' || SQL%ROWCOUNT);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      DBMS_OUTPUT.PUT_LINE(SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      ROLLBACK;
      RAISE;
  END;
/


--GETTING AND SETTING WARNING SETTINGS
SELECT SYS.DBMS_WARNING.GET_WARNING_SETTING_STRING
FROM   DUAL;

ALTER SESSION SET PLSQL_WARNINGS='ENABLE:ALL';

CALL SYS.DBMS_WARNING.ADD_WARNING_SETTING_CAT('ALL', 'ENABLE', 'SESSION');

SELECT DBMS_WARNING.GET_WARNING_SETTING_STRING FROM DUAL;


--WAYS OF DEBUGGING A PROCEDURE
ALTER PROCEDURE update_dept COMPILE DEBUG;

--DEBUGGING IN NATIVE MODE
ALTER PROCEDURE update_dept COMPILE PLSQL_CODE_TYPE = NATIVE;


--TO VIEW THE PROCEDURE DEBUGGING SETTINGS
SELECT PLSQL_OPTIMIZE_LEVEL,
       PLSQL_CODE_TYPE,
       PLSQL_WARNINGS
FROM   ALL_PLSQL_OBJECT_SETTINGS
WHERE  NAME = 'UPDATE_DEPT';


--CALLING PROCEDURES BY ANONYMOUS BLOCK
BEGIN
  UPDATE_DEPT;
END;

--USING CALL FUNCTION TO CALL PROCEDURE
CALL UPDATE_DEPT();

--USING EXEC FUNCTION TO CALL PROCEDURE
EXEC UPDATE_DEPT;
EXECUTE UPDATE_DEPT();